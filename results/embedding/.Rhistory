#colnames(data) <- taxa
return(data)
}
#Random Forest main function
rand_forest <- function(pred_sequences, training_ids, ps, include_taxa = T, include_meta = F){
phen <- sample_data(ps)$phenotype
fam_id <- sample_data(ps)$familyID
data <- NULL
if(include_taxa){
includeTaxa(ps, pred_sequences, data)
}
if(include_meta){
data <- includeMetadata(ps, data)
}
data <- data.frame(phen, data)
validate <- data[-training_ids,]
training <- data[training_ids,]
#to pick best parameters
control <- trainControl(method='repeatedcv',
number=3,
repeats=3)
tree_depths <- round(seq(2, ncol(data), by = ncol(data) / 6))
tunegrid <- expand.grid(.mtry= tree_depths) #mtry is the depth of each decision tree
rf <- train(phen ~.,
data = training,
method='rf',
metric='Accuracy',
tuneGrid=tunegrid,
trControl=control)
mtry_best = as.numeric(rf$bestTune)
print(paste0("Tree depth: ", mtry_best))
pred_votes <- c()
outputlist <- list()
for(i in 1:2){
set.seed(i)
AR.classify <- randomForest(phen~., data = training, ntree = 128, mtry = mtry_best, importance = TRUE)
rf <- AR.classify
OOB.votes <- predict(rf, validate[,-1], type="prob");
OOBpred_votes <- OOB.votes
pred_votes <-  OOBpred_votes[,2]
pred.obj <- prediction(pred_votes, data[names(pred_votes), ]$phen)
#roc (tpr / fpr) perforamnce
roc_perf <- performance(pred.obj,"tpr", "fpr") #Calculate the AUC value
auc_roc <- performance(pred.obj, "auc")@y.values[[1]]
perf_obj <-list()
perf_obj[[1]] <- auc_roc
perf_obj[[2]] <- roc_perf
perf_obj[[3]] <- rf
labels_ordered<-ordered(data[names(pred_votes), ]$phen, levels = c("N", "A"))
perf_obj[[4]] <- ci.auc(labels_ordered, pred_votes)
outputlist[[i]] <- perf_obj
}
return(outputlist)
}
tmp <- getPerformance(ps_deseq, include_taxa = F, include_meta = T, pred_sequences = NA)
meta_values <- tmp[[1]]
meta_perf_objs <- tmp[[2]]
metadf<-data.frame('Lifestyle_Variables_only' = meta_values) #,  'meta_null_dist_no_db_sig' = meta_null_nodoublesig)
metadf<-melt(metadf)
summary(meta_values)
saveRDS(metadf, file = "../results/mlmetadf.rds")
saveRDS(meta_perf_objs, file = "../results/ml/meta_perf_objs.rds")
#plotAUCs(perf_obj_meta, 1, "Model Using Lifestyle Variables Only")
embedded <- read.csv("C:/Users/kitikomp/Documents/Lab/M3_Phyloseq_Analysis/results/embedding/embedded.csv", row.names = 1)
ps_embed <- phyloseq(otu_table(embedded, taxa_are_rows = F), sample_data(ps_deseq@sam_data))
rownames(embedded)
mapping <- sample_data(ps_deseq@sam_data)
rownames(mapping) <- mapping$biospecimen_name
rownames(mapping)
ps_embed <- phyloseq(otu_table(embedded, taxa_are_rows = F), sample_data(mapping))
ps_embed
taxa_names(ps_embed)
tmp <- getPerformance(ps_embed, include_taxa = T, include_meta = T, pred_sequences = taxa_names(ps_embed))
combo_values <- tmp[[1]]
combo_perf_objs <- tmp[[2]]
combodf <- data.frame('Embed_and_lifestyle' = combo_values) #,  'meta_null_dist_no_db_sig' = meta_null_nodoublesig)
combodf <- melt(combodf)
summary(combo_values)
combo_values
meta_values
boxplot(meta_values, combo_values)
embedded <- read.csv("C:/Users/kitikomp/Documents/Lab/M3_Phyloseq_Analysis/results/embedding/embedded.csv", row.names = 1)
mapping <- sample_data(ps_deseq@sam_data)
rownames(mapping) <- mapping$biospecimen_name
ps_embed <- phyloseq(otu_table(embedded, taxa_are_rows = F), sample_data(mapping))
tmp <- getPerformance(ps_embed, include_taxa = T, include_meta = F, pred_sequences = taxa_names(ps_embed))
ps_embed
tmp <- getPerformance(ps_embed, include_taxa = T, include_meta = F, pred_sequences = taxa_names(ps_embed))
dim(mapping)
dim(embedded)
ps_embed
#Random Forest main function
rand_forest <- function(pred_sequences, training_ids, ps, include_taxa = T, include_meta = F){
phen <- sample_data(ps)$phenotype
fam_id <- sample_data(ps)$familyID
data <- NULL
if(include_taxa){
data <- includeTaxa(ps, pred_sequences, data)
}
if(include_meta){
data <- includeMetadata(ps, data)
}
data <- data.frame(phen, data)
validate <- data[-training_ids,]
training <- data[training_ids,]
#to pick best parameters
control <- trainControl(method='repeatedcv',
number=3,
repeats=3)
tree_depths <- round(seq(2, ncol(data), by = ncol(data) / 6))
tunegrid <- expand.grid(.mtry= tree_depths) #mtry is the depth of each decision tree
rf <- train(phen ~.,
data = training,
method='rf',
metric='Accuracy',
tuneGrid=tunegrid,
trControl=control)
mtry_best = as.numeric(rf$bestTune)
print(paste0("Tree depth: ", mtry_best))
pred_votes <- c()
outputlist <- list()
for(i in 1:2){
set.seed(i)
AR.classify <- randomForest(phen~., data = training, ntree = 128, mtry = mtry_best, importance = TRUE)
rf <- AR.classify
OOB.votes <- predict(rf, validate[,-1], type="prob");
OOBpred_votes <- OOB.votes
pred_votes <-  OOBpred_votes[,2]
pred.obj <- prediction(pred_votes, data[names(pred_votes), ]$phen)
#roc (tpr / fpr) perforamnce
roc_perf <- performance(pred.obj,"tpr", "fpr") #Calculate the AUC value
auc_roc <- performance(pred.obj, "auc")@y.values[[1]]
perf_obj <-list()
perf_obj[[1]] <- auc_roc
perf_obj[[2]] <- roc_perf
perf_obj[[3]] <- rf
labels_ordered<-ordered(data[names(pred_votes), ]$phen, levels = c("N", "A"))
perf_obj[[4]] <- ci.auc(labels_ordered, pred_votes)
outputlist[[i]] <- perf_obj
}
return(outputlist)
}
embedded <- read.csv("C:/Users/kitikomp/Documents/Lab/M3_Phyloseq_Analysis/results/embedding/embedded.csv", row.names = 1)
mapping <- sample_data(ps_deseq@sam_data)
rownames(mapping) <- mapping$biospecimen_name
ps_embed <- phyloseq(otu_table(embedded, taxa_are_rows = F), sample_data(mapping))
tmp <- getPerformance(ps_embed, include_taxa = T, include_meta = T, pred_sequences = taxa_names(ps_embed))
embed_values <- tmp[[1]]
embed_perf_objs <- tmp[[2]]
embeddf <- data.frame('Embed' = embed_values) #,  'meta_null_dist_no_db_sig' = meta_null_nodoublesig)
embeddf <- melt(embeddf)
summary(embed_values)
embedded <- read.csv("C:/Users/kitikomp/Documents/Lab/M3_Phyloseq_Analysis/results/embedding/embedded.csv", row.names = 1)
mapping <- sample_data(ps_deseq@sam_data)
rownames(mapping) <- mapping$biospecimen_name
ps_embed <- phyloseq(otu_table(embedded, taxa_are_rows = F), sample_data(mapping))
tmp <- getPerformance(ps_embed, include_taxa = T, include_meta = F, pred_sequences = taxa_names(ps_embed))
dim(embedded)
embedded <- read.csv("C:/Users/kitikomp/Documents/Lab/M3_Phyloseq_Analysis/results/embedding/embedded.csv", row.names = 1)
mapping <- sample_data(ps_deseq@sam_data)
rownames(mapping) <- mapping$biospecimen_name
ps_embed <- phyloseq(otu_table(embedded, taxa_are_rows = T), sample_data(mapping))
embedded <- read.csv("C:/Users/kitikomp/Documents/Lab/M3_Phyloseq_Analysis/results/embedding/embedded.csv", row.names = 1)
mapping <- sample_data(ps_deseq@sam_data)
rownames(mapping) <- mapping$biospecimen_name
ps_embed <- phyloseq(otu_table(embedded, taxa_are_rows = F), sample_data(mapping))
tmp <- getPerformance(ps_embed, include_taxa = T, include_meta = F, pred_sequences = taxa_names(ps_embed))
dim(ps_deseq@otu_table)
embedded <- read.csv("C:/Users/kitikomp/Documents/Lab/M3_Phyloseq_Analysis/results/embedding/embedded.csv", row.names = 1)
mapping <- sample_data(ps_deseq@sam_data)
rownames(mapping) <- mapping$biospecimen_name
ps_embed <- phyloseq(otu_table(t(embedded), taxa_are_rows = T), sample_data(mapping))
tmp <- getPerformance(ps_embed, include_taxa = T, include_meta = F, pred_sequences = taxa_names(ps_embed))
embed_values <- tmp[[1]]
embed_perf_objs <- tmp[[2]]
embeddf <- data.frame('Embed' = embed_values) #,  'meta_null_dist_no_db_sig' = meta_null_nodoublesig)
embeddf <- melt(embeddf)
summary(embed_values)
embedded <- read.csv("C:/Users/kitikomp/Documents/Lab/M3_Phyloseq_Analysis/results/embedding/embedded.csv", row.names = 1)
mapping <- sample_data(ps_deseq@sam_data)
rownames(mapping) <- mapping$biospecimen_name
ps_embed <- phyloseq(otu_table(t(embedded), taxa_are_rows = T), sample_data(mapping))
tmp <- getPerformance(ps_embed, include_taxa = T, include_meta = T, pred_sequences = taxa_names(ps_embed))
combo_values <- tmp[[1]]
combo_perf_objs <- tmp[[2]]
combodf <- data.frame('Embed_and_lifestyle' = combo_values) #,  'meta_null_dist_no_db_sig' = meta_null_nodoublesig)
combodf <- melt(combodf)
summary(combo_values)
summary(meta_values)
boxplot(meta_values, combo_values)
wilcox.test(meta_values, combo_values)
summary(embed_values)
embed_perf_objs
embed_perf_objs[[1]]
embed_perf_objs[[7]][[2]][[3]]
data <- read.csv("C:/Users/kitikomp/Documents/Lab/M3_Phyloseq_Analysis/results/embedding/embedded.csv", row.names = 1)
keep <- intersect(rownames(metadata), rownames(data))
data <- data[keep, ]
metadata <- metadata[keep, ]
phenotype <- metadata$phenotype
familyID <- metadata$familyID
f <- paste("phenotype ~" , paste(colnames(data), collapse = "+"), "+ (1|familyID)")
data <- data.frame(cbind(data, phenotype, familyID))
m <- glm(formula = f, data = data, family = "binomial", maxit = 100)
probs <- predict(m, data, type = "response")
data_output <- data
data_output$probs <- probs
roc(phenotype ~ probs, data = data_output)
da <- dominanceanalysis(m)
da <- dominanceAnalysis(m)
data <- data.frame(ps_deseq@sam_data)
biospecimen_name <- data$biospecimen_name
rownames(data) <- biospecimen_name
#data <- data[!duplicated(data$host_name), ]
data <- data %>% select(-c("biospecimen_id", "biospecimen_name", "host_name", "timepoint", "racial_group", "specific_food_allergy", "sex", "other_GI_symptoms", "diarrhea"))
tmp <- data
for(var in colnames(tmp)){
if(c("TRUE") %in% tmp[,var]){
tmp[,var] <- ifelse(tmp[,var]=="TRUE", 1, 0 )
}
}
data <- tmp
familyID <- data$familyID
phenotype <- data$phenotype
phenotype <- ifelse(phenotype == "A", 1, 0)
data <- data %>% select(-c("phenotype", "familyID"))
data$age
#normalize
data <- apply(data, 2, function(x){ return((x - mean(x, na.rm = T)) / sd(x, na.rm = T))})
data$age
data <- data.frame(ps_deseq@sam_data)
biospecimen_name <- data$biospecimen_name
rownames(data) <- biospecimen_name
#data <- data[!duplicated(data$host_name), ]
data <- data %>% select(-c("biospecimen_id", "biospecimen_name", "host_name", "timepoint", "racial_group", "specific_food_allergy", "sex", "other_GI_symptoms", "diarrhea"))
tmp <- data
for(var in colnames(tmp)){
if(c("TRUE") %in% tmp[,var]){
tmp[,var] <- ifelse(tmp[,var]=="TRUE", 1, 0 )
}
}
data <- tmp
familyID <- data$familyID
phenotype <- data$phenotype
phenotype <- ifelse(phenotype == "A", 1, 0)
data <- data %>% select(-c("phenotype", "familyID"))
#normalize
data <- data.frame(apply(data, 2, function(x){ return((x - mean(x, na.rm = T)) / sd(x, na.rm = T))}))
data$age
data <- data.frame(ps_deseq@sam_data)
data$sex
data <- data.frame(ps_deseq@sam_data)
biospecimen_name <- data$biospecimen_name
rownames(data) <- biospecimen_name
#data <- data[!duplicated(data$host_name), ]
data <- data %>% select(-c("biospecimen_id", "biospecimen_name", "host_name", "timepoint", "racial_group", "specific_food_allergy", "other_GI_symptoms", "diarrhea"))
tmp <- data
for(var in colnames(tmp)){
if(c("TRUE") %in% tmp[,var]){
tmp[,var] <- ifelse(tmp[,var]=="TRUE", 1, 0 )
}
}
data <- tmp
familyID <- data$familyID
phenotype <- data$phenotype
phenotype <- ifelse(phenotype == "A", 1, 0)
data <- data %>% select(-c("phenotype", "familyID"))
#normalize
data <- data.frame(apply(data, 2, function(x){ return((x - mean(x, na.rm = T)) / sd(x, na.rm = T))}))
data$sex
f <- "phenotype ~ age + sex + (1|familyID)"
data <- data.frame(cbind(data, phenotype, familyID))
data <- data.frame(ps_deseq@sam_data)
biospecimen_name <- data$biospecimen_name
rownames(data) <- biospecimen_name
host_name <- data$host_name
#data <- data[!duplicated(data$host_name), ]
data <- data %>% select(-c("biospecimen_id", "biospecimen_name", "host_name", "timepoint", "racial_group", "specific_food_allergy", "other_GI_symptoms", "diarrhea"))
tmp <- data
for(var in colnames(tmp)){
if(c("TRUE") %in% tmp[,var]){
tmp[,var] <- ifelse(tmp[,var]=="TRUE", 1, 0 )
}
}
data <- tmp
familyID <- data$familyID
phenotype <- data$phenotype
phenotype <- ifelse(phenotype == "A", 1, 0)
data <- data %>% select(-c("phenotype", "familyID"))
#normalize
data <- data.frame(apply(data, 2, function(x){ return((x - mean(x, na.rm = T)) / sd(x, na.rm = T))}))
f <- "phenotype ~ age + sex + (1|familyID)"
data <- data.frame(cbind(data, phenotype, familyID))
m <- glm(formula = f, data = data, family = "binomial")
probs <- predict(m, data, type = "response")
summary(m)
f <- "phenotype ~ age + sex"
data <- data.frame(cbind(data, phenotype, familyID))
m <- glm(formula = f, data = data, family = "binomial")
summary(m)
library(pROC)
f <- "phenotype ~ age + sex"
data <- data.frame(cbind(data, phenotype, familyID))
m <- glm(formula = f, data = data, family = "binomial")
summary(m)
probs <- predict(m, data, type = "response")
data_output <- data
data_output$probs <- probs
roc(phenotype ~ probs, data = data_output)
library(pROC)
f <- "phenotype ~ age + sex"
data_use <- data.frame(cbind(data, phenotype, familyID))
m <- glm(formula = f, data = dat_use, family = "binomial")
library(pROC)
f <- "phenotype ~ age + sex"
data_use <- data.frame(cbind(data, phenotype, familyID))
m <- glm(formula = f, data = data_use, family = "binomial")
summary(m)
probs <- predict(m, data_use, type = "response")
data_use$probs <- probs
roc(phenotype ~ probs, data = data_use)
roc_basic = roc(phenotype ~ probs, data = data_use)
roc_basic
roc_basic$percent
roc_basic$auc
data_use <- data
f <- paste("phenotype ~" , paste(colnames(data_use), collapse = "+"))
data_use <- data.frame(cbind(data, phenotype, familyID))
data_use
data <- data.frame(ps_deseq@sam_data)
biospecimen_name <- data$biospecimen_name
rownames(data) <- biospecimen_name
host_name <- data$host_name
#data <- data[!duplicated(data$host_name), ]
data <- data %>% select(-c("biospecimen_id", "biospecimen_name", "host_name", "timepoint", "racial_group", "specific_food_allergy", "other_GI_symptoms", "diarrhea"))
tmp <- data
for(var in colnames(tmp)){
if(c("TRUE") %in% tmp[,var]){
tmp[,var] <- ifelse(tmp[,var]=="TRUE", 1, 0 )
}
}
data <- tmp
familyID <- data$familyID
phenotype <- data$phenotype
phenotype <- ifelse(phenotype == "A", 1, 0)
data <- data %>% select(-c("phenotype", "familyID"))
#normalize
data <- data.frame(apply(data, 2, function(x){ return((x - mean(x, na.rm = T)) / sd(x, na.rm = T))}))
library(pROC)
f <- "phenotype ~ age + sex"
data_use <- data.frame(cbind(data, phenotype, familyID))
m <- glm(formula = f, data = data_use, family = "binomial")
summary(m)
probs <- predict(m, data_use, type = "response")
data_use$probs <- probs
roc_basic = roc(phenotype ~ probs, data = data_use)
roc_basic$auc
data_use <- data
f <- paste("phenotype ~" , paste(colnames(data_use), collapse = "+"))
data_use <- data.frame(cbind(data, phenotype, familyID))
m <- glm(formula = f, data = data_use, family = "binomial")
summary(m)
probs <- predict(m, data_use, type = "response")
data_use$probs <- probs
roc_basic_meta = roc(phenotype ~ probs, data = data_use)
roc_basic_meta$auc
data_use
data_use <- data
f <- paste("phenotype ~" , paste(colnames(data_use), collapse = "+"))
data_use <- data.frame(cbind(data, phenotype, familyID))
m <- glm(formula = f, data = data_use, family = "binomial")
probs <- predict(m, data_use, type = "response")
data_use$probs <- probs
roc_basic_meta = roc(phenotype ~ probs, data = data_use)
roc_basic_meta$auc
library(pROC)
f <- "phenotype ~ age + sex"
data_use <- data.frame(cbind(data, phenotype, familyID))
m <- glm(formula = f, data = data_use, family = "binomial")
probs <- predict(m, data_use, type = "response")
data_use$probs <- probs
roc_basic = roc(phenotype ~ probs, data = data_use)
roc_basic$auc
ord <- ordinate(ps_deseq, method = "PCoA", distance = "bray")
micro_features <- ord$vectors[ , 1:100]
micro_features <- data.frame(apply(micro_features, 2, function(x){ return((x - mean(x, na.rm = T)) / sd(x, na.rm = T))}))
colnames(micro_features)
f <- paste("phenotype ~ age + sex +", paste(colnames(micro_features), collapse = "+"))
f
ord <- ordinate(ps_deseq, method = "PCoA", distance = "bray")
micro_features <- ord$vectors[ , 1:100]
micro_features <- data.frame(apply(micro_features, 2, function(x){ return((x - mean(x, na.rm = T)) / sd(x, na.rm = T))}))
data_use <- data.frame(cbind(data, micro_features))
f <- paste("phenotype ~ age + sex +", paste(colnames(micro_features), collapse = "+"))
m <- glm(formula = f, data = data_use, family = "binomial")
probs <- predict(m, data_use, type = "response")
data_use$probs <- probs
roc_basic_micro = roc(phenotype ~ probs, data = data_use)
roc_basic_micro$auc
ord <- ordinate(ps_deseq, method = "PCoA", distance = "bray")
micro_features <- ord$vectors[ , 1:100]
micro_features <- data.frame(apply(micro_features, 2, function(x){ return((x - mean(x, na.rm = T)) / sd(x, na.rm = T))}))
data_use <- data.frame(cbind(data, micro_features))
f <- paste("phenotype ~ age + sex +", paste(colnames(micro_features), collapse = "+"))
ord <- ordinate(ps_deseq, method = "PCoA", distance = "bray")
micro_features <- ord$vectors[ , 1:100]
micro_features <- data.frame(apply(micro_features, 2, function(x){ return((x - mean(x, na.rm = T)) / sd(x, na.rm = T))}))
data_use <- data.frame(cbind(data, micro_features, phenotype, familyID))
f <- paste("phenotype ~ age + sex +", paste(colnames(micro_features), collapse = "+"))
m <- glm(formula = f, data = data_use, family = "binomial")
probs <- predict(m, data_use, type = "response")
data_use$probs <- probs
roc_basic_micro = roc(phenotype ~ probs, data = data_use)
roc_basic_micro$auc
f <- paste("phenotype ~", paste(colnames(micro_features), collapse = "+"), paste(colnames(data), collapse = "+"))
f
data_use <- data.frame(cbind(data, micro_features, phenotype, familyID))
f <- paste("phenotype ~", paste(colnames(micro_features), collapse = "+"), paste(colnames(data), collapse = "+"))
data_use <- data.frame(cbind(data, micro_features, phenotype, familyID))
m <- glm(formula = f, data = data_use, family = "binomial")
f
f <- paste("phenotype ~", paste(colnames(micro_features), collapse = "+"), "+", paste(colnames(data), collapse = "+"))
data_use <- data.frame(cbind(data, micro_features, phenotype, familyID))
m <- glm(formula = f, data = data_use, family = "binomial")
probs <- predict(m, data_use, type = "response")
data_use$probs <- probs
roc_basic_combo = roc(phenotype ~ probs, data = data_use)
roc_basic_combo$auc
as.numeric(roc_basic_combo$auc)
roc_basic_combo$auc[1]
totaldelta <- roc_basic_combo[1] - roc_basic[1]
roc_basic_combo[1]
roc_basic_combo
roc_basic_combo$auc[1]
totaldelta <- roc_basic_combo$auc[1] - roc_basic$auc[1]
metadata_contrib <- roc_basic_meta$auc[1] - roc_basic$auc[1]
micro_contrib <- roc_basic_micro$auc[1] - roc_basic$auc[1]
print(totaldelta)
print(metadata_contrib)
print(micro_contrib)
combo_contrib <- roc_basic_combo$auc[1] - roc_basic$auc[1]
totaldelta <- roc_basic_combo$auc[1] - roc_basic$auc[1]
metadata_contrib <- roc_basic_meta$auc[1] - roc_basic$auc[1]
micro_contrib <- roc_basic_micro$auc[1] - roc_basic$auc[1]
combo_contrib <- roc_basic_combo$auc[1] - roc_basic$auc[1]
print(totaldelta)
print(metadata_contrib)
print(micro_contrib)
print(combo_contrib)
df <- data.frame(basic = roc_basic$auc[1], basic_metadata =  roc_basic_meta$auc[1], basic_micro = roc_basic_micro$auc[1], basic_metadata_micro = roc_basic_combo$auc[1])
df
df <- melt(df)
df
ggplot(data = df, aes(x = variable, y = value)) + geom_bar(stat = "identity")
?geom_bar
ggplot(data = df, aes(x = variable, y = value)) + geom_bar(stat = "identity", orientation = x)
ggplot(data = df, aes(x = variable, y = value)) + geom_bar(stat = "identity")
ggplot(data = df, aes(x = variable, y = value, fill = variable)) + geom_bar(stat = "identity")
df
df$value - df$value[df$variable == "basic"]
df$diffs <- df$value - df$value[df$variable == "basic"]
df
ggplot(data = df, aes(x = variable, y = diffs, fill = variable)) + geom_bar(stat = "identity")
ggplot(data = df, aes(x = variable, y = diffs, fill = variable)) + geom_bar(stat = "identity", position = "dodge")
ggplot(data = df, aes(x = variable, y = diffs, fill = variable)) + geom_bar(stat = "identity", position_dodge())
ggplot(data = df, aes(x = variable, y = diffs, fill = variable)) + geom_bar(stat = "identity") + position_dodge()
ggplot(data = df, aes(x = variable, y = diffs, fill = variable)) + geom_bar(stat = "identity", position = "stack")
ggplot(data = df, aes(x = variable, y = diffs, fill = variable)) + geom_bar(stat = "identity", position = "stack")
ggplot(data = df, aes(x = variable, y = diffs, fill = variable)) + geom_bar(stat = "identity", position = "stack")
df
ggplot(data = df, aes(x = variable, y = diffs)) + geom_bar(stat = "identity", position = "stack")
ggplot(data = df, aes(x = variable, y = diffs)) + geom_bar(stat = "identity", position = "stack")
ggplot(data = df, aes(x = variable, y = diffs)) + geom_bar(stat = "identity", position = "stack")
ggplot(data = df, aes(x = variable, y = diffs)) + geom_bar(stat = "identity", position = "dodge")
ggplot(data = df, aes(x = variable, y = diffs)) + geom_bar(stat = "identity", position = "stack")
ggplot(data = df, aes(x = variable, y = diffs)) + geom_bar( position = "stack")
ggplot(data = df, aes(x = variable, y = diffs)) + geom_bar( position = "stack", stat = "identity")
ggplot(data = df, aes(x = variable, y = diffs, fill = variable)) + geom_bar(stat = "identity")
ggplot(data = df, aes( y = diffs, fill = variable)) + geom_bar(stat = "identity")
ggplot(data = df, aes( x = factor(variable), y = diffs, fill = variable)) + geom_bar(stat = "identity")
ggplot(data = df, aes( x = factor(variable), y = diffs, fill = variable)) + stat_summary(fun.y = "mean", geom = "bar")
ggplot(data = df, aes( x = factor(variable), y = diffs, fill = variable)) + stat_summary(fun.y = "mean", geom = "bar", position="stack")
ggplot(data = df, aes( x = factor(variable), y = diffs, fill = variable)) + stat_summary(fun = "mean", geom = "bar", position="stack")
ggplot(data = df) + geom_bar( aes( x = factor(variable), y = diffs, fill = variable), stat = "identity")
ggplot(data = df) + geom_bar( aes( x = factor(variable), y = diffs, fill = variable), stat = "identity", position = "stack")
ggplot(data = df) + geom_bar( aes( x = factor(variable), y = diffs, fill = variable, position = "stack"), stat = "identity", position = "stack")
ggplot(data = df, aes(x = variable, y = value, fill = variable)) + geom_bar(stat = "identity", position = "stack")
df
ggplot(data = df) + geom_bar( aes(diffs, fill = variable), stat = "identity", position = "stack")
ggplot(data = df) + geom_bar( aes(y = diffs, fill = variable), stat = "identity", position = "stack")
ggplot(data = df, aes(diffs)) + geom_bar(aes(fill = variable))
ggplot(data = df, aes(diffs)) + geom_bar(aes(fill = variable)) + coord_flip()
df
df <- df[!(df$variable == "basic"), ]
ggplot(data = df, aes(diffs)) + geom_bar(aes(fill = variable)) + coord_flip()
ggplot(data = df, aes(diffs)) + geom_bar(aes(fill = variable))
ggplot(data = df, aes(y = diffs)) + geom_bar(aes(fill = variable))
df <- df[ , c("variable", "diffs")]
ggplot(data = df, aes(y = diffs)) + geom_bar(aes(fill = variable))
df
ggplot(data = df, aes(x = variable, y = diffs)) + geom_bar(aes(fill = variable))
ggplot(data = df, aes(x = variable, y = diffs)) + geom_bar(aes(fill = variable), stat = "identity")
ggplot(data = df, aes(y = diffs)) + geom_bar(aes(fill = variable), stat = "identity")
ggplot(data = df, aes(diffs)) + geom_bar(aes(fill = variable), stat = "identity")
ggplot(data = df, aes(x = variable, y = diffs)) + geom_bar(aes(fill = variable), stat = "identity")
ggplot(data = df, aes(x = variable, y = diffs)) + geom_col(aes(fill = variable), stat = "identity")
ggplot(data = df, aes(x = variable, y = diffs)) + geom_col(aes(fill = variable))
ggplot(data = df, aes(y = diffs)) + geom_col(aes(fill = variable))
ggplot(data = df, aes(x = variable, y = diffs)) + geom_col(aes(fill = variable), position = "stack")
ggplot(data = df, aes(x = variable)) + geom_col(aes(y = diffs, fill = variable), position = "stack")
ggplot(data = df, aes(x = variable)) + geom_col(aes(y = diffs, fill = variable), position = "identity")
df
