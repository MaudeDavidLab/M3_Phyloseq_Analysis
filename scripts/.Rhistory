sampledf <- data.frame(sample_data(ps))
beta_di<-betadisper(erie_bray_sum_pcoA, ps@sam_data$Family.group.ID)
to_return<-list()
to_return[[1]]<-p
to_return[[2]]<-beta_di
return(to_return)
}
permanova_res <- read.csv(paste0(output_data, "PERMANOVA_noLR.csv"))
permanova_res <- permanova_res[2:nrow(permanova_res), ] #First only include 95 samples because optional question
r2_min <- .02
n_sample_min <- 400
variables <- as.character(permanova_res[permanova_res$TotalN > n_sample_min & permanova_res$R2 > r2_min, ]$Variable)
plot_list <- list()
for(variable in variables){
res <- plotting_consPcoA(ps_deseq, "Deseq", variables = variable)
plot_list[[variable]] <- res[[1]]
}
plotting_consPcoA <- function(ps, norm, variables){
#drop samples with NA values in contraints
keep <- as.vector(apply(ps@sam_data[, variables], 1, function(x) return(!any(is.na(x)))))
ps <- prune_samples(keep, ps)
colnames(ps_6fam@sam_data)[colnames(ps_6fam@sam_data) == variables] <- gsub("frequency...longitudinal.", "", variables)
variables <- gsub("frequency...longitudinal.", "", variables)
#include only families that have all 6 timepoints, 3 for ASD and 3 for NT participants, for ease of visualization
fam_6<-names(table(sample_data(ps)$Family.group.ID)[table(sample_data(ps)$Family.group.ID) == 6])
ps_6fam<-prune_samples(sample_data(ps)$Family.group.ID %in% fam_6,ps )
sample_data(ps_6fam)$Family.group.ID <- paste0('fam', as.character(sample_data(ps_6fam)$Family.group.ID))
formula <- as.formula(paste("~", variables))
if(length(variables) > 1){
formula <- as.formula(paste("~", paste(variables, collapse = "+")))
}
ps_pcoa_ord <- ordinate(
physeq = ps_6fam,
method = "CAP",
distance = "bray",
formula = formula
)
p <- plot_ordination(
physeq = ps_6fam,
ordination = ps_pcoa_ord,
color = variables,
axes = c(1,2),
title= paste("Constrained PcoA",norm,"ordinated by \n", paste(variables, collapse = "\n"))) +
geom_point( size = 2) +
theme_minimal()+
theme(text = element_text(size =10), plot.title = element_text(size=10))
if(variables == "phenotype"){
p <- p + scale_color_manual(values=sgColorPalette)
}
#sum_pcoA_DesEq<-summary(ps_pcoa_ord)
erie_bray_sum_pcoA <- phyloseq::distance(ps, method = "bray")
sampledf <- data.frame(sample_data(ps))
beta_di<-betadisper(erie_bray_sum_pcoA, ps@sam_data$Family.group.ID)
to_return<-list()
to_return[[1]]<-p
to_return[[2]]<-beta_di
return(to_return)
}
plotting_consPcoA <- function(ps, norm, variables){
#drop samples with NA values in contraints
keep <- as.vector(apply(ps@sam_data[, variables], 1, function(x) return(!any(is.na(x)))))
ps <- prune_samples(keep, ps)
colnames(ps@sam_data)[colnames(ps@sam_data) == variables] <- gsub("frequency...longitudinal.", "", variables)
variables <- gsub("frequency...longitudinal.", "", variables)
#include only families that have all 6 timepoints, 3 for ASD and 3 for NT participants, for ease of visualization
fam_6<-names(table(sample_data(ps)$Family.group.ID)[table(sample_data(ps)$Family.group.ID) == 6])
ps_6fam<-prune_samples(sample_data(ps)$Family.group.ID %in% fam_6,ps )
sample_data(ps_6fam)$Family.group.ID <- paste0('fam', as.character(sample_data(ps_6fam)$Family.group.ID))
formula <- as.formula(paste("~", variables))
if(length(variables) > 1){
formula <- as.formula(paste("~", paste(variables, collapse = "+")))
}
ps_pcoa_ord <- ordinate(
physeq = ps_6fam,
method = "CAP",
distance = "bray",
formula = formula
)
p <- plot_ordination(
physeq = ps_6fam,
ordination = ps_pcoa_ord,
color = variables,
axes = c(1,2),
title= paste("Constrained PcoA",norm,"ordinated by \n", paste(variables, collapse = "\n"))) +
geom_point( size = 2) +
theme_minimal()+
theme(text = element_text(size =10), plot.title = element_text(size=10))
if(variables == "phenotype"){
p <- p + scale_color_manual(values=sgColorPalette)
}
#sum_pcoA_DesEq<-summary(ps_pcoa_ord)
erie_bray_sum_pcoA <- phyloseq::distance(ps, method = "bray")
sampledf <- data.frame(sample_data(ps))
beta_di<-betadisper(erie_bray_sum_pcoA, ps@sam_data$Family.group.ID)
to_return<-list()
to_return[[1]]<-p
to_return[[2]]<-beta_di
return(to_return)
}
permanova_res <- read.csv(paste0(output_data, "PERMANOVA_noLR.csv"))
permanova_res <- permanova_res[2:nrow(permanova_res), ] #First only include 95 samples because optional question
r2_min <- .02
n_sample_min <- 400
variables <- as.character(permanova_res[permanova_res$TotalN > n_sample_min & permanova_res$R2 > r2_min, ]$Variable)
plot_list <- list()
for(variable in variables){
res <- plotting_consPcoA(ps_deseq, "Deseq", variables = variable)
plot_list[[variable]] <- res[[1]]
}
plot_grid(plotlist = plot_list, nrow = 2, ncol = 2)
plotting_consPcoA <- function(ps, norm, variables){
#drop samples with NA values in contraints
keep <- as.vector(apply(ps@sam_data[, variables], 1, function(x) return(!any(is.na(x)))))
ps <- prune_samples(keep, ps)
#Ease of labeling
colnames(ps@sam_data)[colnames(ps@sam_data) == variables] <- gsub("frequency...longitudinal.", "", variables)
variables <- gsub("frequency...longitudinal.", "", variables)
colnames(ps@sam_data)[colnames(ps@sam_data) == variables] <- gsub("frequency.", "", variables)
variables <- gsub("frequency.", "", variables)
#include only families that have all 6 timepoints, 3 for ASD and 3 for NT participants, for ease of visualization
fam_6<-names(table(sample_data(ps)$Family.group.ID)[table(sample_data(ps)$Family.group.ID) == 6])
ps_6fam<-prune_samples(sample_data(ps)$Family.group.ID %in% fam_6,ps )
sample_data(ps_6fam)$Family.group.ID <- paste0('fam', as.character(sample_data(ps_6fam)$Family.group.ID))
formula <- as.formula(paste("~", variables))
if(length(variables) > 1){
formula <- as.formula(paste("~", paste(variables, collapse = "+")))
}
ps_pcoa_ord <- ordinate(
physeq = ps_6fam,
method = "CAP",
distance = "bray",
formula = formula
)
p <- plot_ordination(
physeq = ps_6fam,
ordination = ps_pcoa_ord,
color = variables,
axes = c(1,2),
title= paste("Constrained PcoA",norm,"ordinated by \n", paste(variables, collapse = "\n"))) +
geom_point( size = 2) +
theme_minimal()+
theme(text = element_text(size =10), plot.title = element_text(size=10))
if(variables == "phenotype"){
p <- p + scale_color_manual(values=sgColorPalette)
}
#sum_pcoA_DesEq<-summary(ps_pcoa_ord)
erie_bray_sum_pcoA <- phyloseq::distance(ps, method = "bray")
sampledf <- data.frame(sample_data(ps))
beta_di<-betadisper(erie_bray_sum_pcoA, ps@sam_data$Family.group.ID)
to_return<-list()
to_return[[1]]<-p
to_return[[2]]<-beta_di
return(to_return)
}
permanova_res <- read.csv(paste0(output_data, "PERMANOVA_noLR.csv"))
permanova_res <- permanova_res[2:nrow(permanova_res), ] #First only include 95 samples because optional question
r2_min <- .02
n_sample_min <- 400
variables <- as.character(permanova_res[permanova_res$TotalN > n_sample_min & permanova_res$R2 > r2_min, ]$Variable)
plot_list <- list()
for(variable in variables){
res <- plotting_consPcoA(ps_deseq, "Deseq", variables = variable)
plot_list[[variable]] <- res[[1]]
}
plot_grid(plotlist = plot_list, nrow = 2, ncol = 2)
pdf(paste0(output_data, 'pcoa_top_permanova_variables.pdf'))
plot_grid(plotlist = plot_list, nrow = 2, ncol = 2)
dev.off()
plot_grid(plotlist = plot_list, nrow = 2, ncol = 2)
pdf(paste0(output_data, 'pcoa_top_permanova_variables.pdf'))
plot_grid(plotlist = plot_list, nrow = 2, ncol = 2)
pdf(paste0(output_data, 'pcoa_top_permanova_variables.pdf'))
plot_grid(plotlist = plot_list, nrow = 2, ncol = 2)
dev.off()
?odf
?pdf
plot_grid(plotlist = plot_list, nrow = 2, ncol = 2)
pdf(paste0(output_data, 'pcoa_top_permanova_variables.pdf'), width = 12, height = 9)
plot_grid(plotlist = plot_list, nrow = 2, ncol = 2)
pdf(paste0(output_data, 'pcoa_top_permanova_variables.pdf'), width = 12, height = 9)
plot_grid(plotlist = plot_list, nrow = 2, ncol = 2)
dev.off()
chi <- read.csv("../results/Xsqr_05.csv")
perma <- read.csv("../results/PERMANOVA_noLR.csv")
chi$X
chi$X, perma$Variable
intersect(chi$X, perma$Variable)
sig_taxa
sig_taxa$method
sig_taxa <- read.delim(paste0(output_data, "significant_taxa_timeseries.tsv"), sep = '\t', row.names = 1)
sig_taxa$method
grepl(",", sig_taxa$method)
sum(grepl(",", sig_taxa$method))
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(reshape2)
library(phyloseq)
library(DT)
library(data.table)
sgColorPalette = c("#84CF04","#01B5BB","#E50E63","#6D7272","#8F389E",
"#DF8236","#036B6B","#F1BA2F","#9F832D","#94E804",
"#01D4DB","#FAC131","#B0B8B8","#F08C3A","#FF106E",
"#B948CC","#05B5B5","#CFAA3A")
### functions to plot
make_vis_plots <- function(ps_norm, grouping, tax, plot_type=c('box', 'bar')){
# ps should be a normalized (DESeq or CSS) phyloseq object
# grouping should match the column name in the sample_data
# tax is a taxonomical bin id (ASV) in the counts table to plot
# subset phyloseq object to select ASV of interest
ps_filt=prune_taxa(taxa_names(ps_norm) %in% tax, ps_norm)
# get normalized counts
plot_table<-data.table(otu_table(ps_filt), keep.rownames=TRUE)[rn %in% tax]
# add very small value, min/100000 to 0
plot_table <- melt(plot_table, id.vars='rn')
plot_table$value <- plot_table$value+min(plot_table[value!=0]$value)/100000
# add metadata
groupDT=data.table(data.frame(sample_data(ps_filt)[, c(grouping, 'Within.study.sampling.date')]), keep.rownames=TRUE)
setnames(groupDT, 'rn', 'variable')
plot_table <- merge(plot_table, groupDT, by='variable', all.x=TRUE)
#taxa names for plot labels
species_names <- as.character(ps_tss@tax_table[plot_table$rn, 7])
genus_names <- as.character(ps_tss@tax_table[plot_table$rn, 6])
family_names <- as.character(ps_tss@tax_table[plot_table$ren, 5])
taxa_names <- paste( family_names, genus_names,species_names, sep = "\n")
unclassified <- species_names == "s__unclassified"
species_names[unclassified] <- genus_names[unclassified]
plot_table$rn <- taxa_names
# change variable to general name
setnames(plot_table, grouping, 'Group')
# boxplot
if(plot_type=='box'){
ggplot(data=plot_table, aes(x=Within.study.sampling.date, y = value, fill=Group)) +
geom_boxplot(outlier.color=NA) +
geom_jitter(position=position_jitterdodge(0.2), cex=1.5, color="gray44") +
labs(title =deparse(substitute(ps_norm)), x='', y ='Proportional counts, log scale') +
scale_y_log10() +
scale_fill_manual(values=sgColorPalette)+
theme_minimal() + facet_wrap(~rn, scales='free', ncol=3)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
} else if (plot_type=='bar'){
plot_table2 <- plot_table[, list(mean_ct=mean(value), sem=sd(value)/sqrt(.N)), by=c('Group', 'Within.study.sampling.date', 'rn')]
ggplot(data=plot_table2, aes(x=Within.study.sampling.date, y =mean_ct, fill=Group)) +
geom_bar(stat='identity', position=position_dodge()) +
geom_errorbar(aes(ymin=mean_ct-sem, ymax=mean_ct+sem), width=0.2, position=position_dodge(0.9))+
labs(title =deparse(substitute(ps_norm)), x='', y ='Proportional counts, 0 to 1 scale') +
scale_fill_manual(values=sgColorPalette)+
theme_minimal() + facet_wrap(~rn, scales='free', ncol=3)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
}
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(reshape2)
library(phyloseq)
library(DT)
library(data.table)
sgColorPalette = c("#84CF04","#01B5BB","#E50E63","#6D7272","#8F389E",
"#DF8236","#036B6B","#F1BA2F","#9F832D","#94E804",
"#01D4DB","#FAC131","#B0B8B8","#F08C3A","#FF106E",
"#B948CC","#05B5B5","#CFAA3A")
output_data <- "../results/"
sig_taxa <- read.table(paste0(output_data, "significant_taxa_timeseries.tsv"), sep = "\t", header = T)
#Load for plotting purposes:
ps_tss <- readRDS(paste0(output_data, "Normalized/ps_tss_pass_min_postDD_min0.03.rds"))
keep <- grepl("DESEQ", sig_taxa$method) & grepl("ZIG", sig_taxa$method)
if(sum(keep)>0){
print(make_vis_plots(ps_tss, 'phenotype', sig_taxa[keep, ]$asv, 'box'))
# plot bar as well
print(make_vis_plots(ps_tss, 'phenotype', sig_taxa[keep, ]$asv, 'bar'))
} else {
print('no combined timeseries significant taxa')
}
keep <- grepl("DESEQ", sig_taxa$method) & grepl("ZIG", sig_taxa$method)
keep
keep <- grepl("DESEQ", sig_taxa$method) & grepl("ZIG", sig_taxa$method)
if(sum(keep)>0){
print(make_vis_plots(ps_tss, 'phenotype', sig_taxa[keep, ]$asv, 'box'))
# plot bar as well
print(make_vis_plots(ps_tss, 'phenotype', sig_taxa[keep, ]$asv, 'bar'))
} else {
print('no combined timeseries significant taxa')
}
sig_taxa[keep, ]$asv
taxa_names(ps_css)
grepl("t_", taxa_names(ps_css))
sum(grepl("t_", taxa_names(ps_css)))
### functions to plot
make_vis_plots <- function(ps_norm, grouping, tax, plot_type=c('box', 'bar')){
# ps should be a normalized (DESeq or CSS) phyloseq object
# grouping should match the column name in the sample_data
# tax is a taxonomical bin id (ASV) in the counts table to plot
# subset phyloseq object to select ASV of interest
ps_filt=prune_taxa(taxa_names(ps_norm) %in% tax, ps_norm)
# get normalized counts
plot_table<-data.table(otu_table(ps_filt), keep.rownames=TRUE)[rn %in% tax]
# add very small value, min/100000 to 0
plot_table <- melt(plot_table, id.vars='rn')
plot_table$value <- plot_table$value+min(plot_table[value!=0]$value)/100000
# add metadata
groupDT=data.table(data.frame(sample_data(ps_filt)[, c(grouping, 'Within.study.sampling.date')]), keep.rownames=TRUE)
setnames(groupDT, 'rn', 'variable')
plot_table <- merge(plot_table, groupDT, by='variable', all.x=TRUE)
#taxa names for plot labels
species_names <- as.character(ps_tss@tax_table[plot_table$rn, 7])
genus_names <- as.character(ps_tss@tax_table[plot_table$rn, 6])
family_names <- as.character(ps_tss@tax_table[plot_table$rn, 5])
taxa_names <- paste( family_names, genus_names,species_names, sep = "\n")
plot_table$rn <- taxa_names
# change variable to general name
setnames(plot_table, grouping, 'Group')
# boxplot
if(plot_type=='box'){
ggplot(data=plot_table, aes(x=Within.study.sampling.date, y = value, fill=Group)) +
geom_boxplot(outlier.color=NA) +
geom_jitter(position=position_jitterdodge(0.2), cex=1.5, color="gray44") +
labs(title =deparse(substitute(ps_norm)), x='', y ='Proportional counts, log scale') +
scale_y_log10() +
scale_fill_manual(values=sgColorPalette)+
theme_minimal() + facet_wrap(~rn, scales='free', ncol=3)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
} else if (plot_type=='bar'){
plot_table2 <- plot_table[, list(mean_ct=mean(value), sem=sd(value)/sqrt(.N)), by=c('Group', 'Within.study.sampling.date', 'rn')]
ggplot(data=plot_table2, aes(x=Within.study.sampling.date, y =mean_ct, fill=Group)) +
geom_bar(stat='identity', position=position_dodge()) +
geom_errorbar(aes(ymin=mean_ct-sem, ymax=mean_ct+sem), width=0.2, position=position_dodge(0.9))+
labs(title =deparse(substitute(ps_norm)), x='', y ='Proportional counts, 0 to 1 scale') +
scale_fill_manual(values=sgColorPalette)+
theme_minimal() + facet_wrap(~rn, scales='free', ncol=3)+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
}
}
keep <- grepl("DESEQ", sig_taxa$method) & grepl("ZIG", sig_taxa$method)
if(sum(keep)>0){
print(make_vis_plots(ps_tss, 'phenotype', sig_taxa[keep, ]$asv, 'box'))
# plot bar as well
print(make_vis_plots(ps_tss, 'phenotype', sig_taxa[keep, ]$asv, 'bar'))
} else {
print('no combined timeseries significant taxa')
}
keep <- grepl("ZIG", sig_taxa$method) & grepl("ANCOM", sig_taxa$method)
if(sum(keep)>0){
print(make_vis_plots(ps_tss, 'phenotype', sig_taxa[keep, ]$asv, 'box'))
# plot bar as well
print(make_vis_plots(ps_tss, 'phenotype', sig_taxa[keep, ]$asv, 'bar'))
} else {
print('no combined timeseries significant taxa')
}
ps_deseq@otu_table["t__186843", ]
ps_deseq@sam_data$Minimum.time.since.antibiotics
plot(ps_deseq@sam_data$Minimum.time.since.antibiotics, abund)
abund <- ps_deseq@otu_table["t__186843", ]
plot(ps_deseq@sam_data$Minimum.time.since.antibiotics, abund)
plot(ps_deseq@sam_data$Minimum.time.since.antibiotics, abund)
abund <- ps_tss@otu_table["t__186843", ]
ps_tss@sam_data$Minimum.time.since.antibiotics
plot(ps_tss@sam_data$Minimum.time.since.antibiotics, abund)
taxa_names(ps_tss)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/ctata/Documents/Lab/M3_longitudinal/M3_Phyloseq_Analysis")
library(caret)
library(randomForest)
library(tibble)
library(ROCR)
library(dplyr)
library(reshape2)
library(phyloseq)
library(glmnet)
source('clean_mapping_ml.R')
output_data <- "results/"
ps_deseq <- readRDS(paste0(output_data, "Filtered/ps_deseq_friedfilt.rds"))
output_data <- "../results/"
ps_deseq <- readRDS(paste0(output_data, "Filtered/ps_deseq_friedfilt.rds"))
ps_css <- readRDS(paste0(output_data, "Filtered/ps_css_friedfilt.rds"))
sig_res <- read.csv(paste0(output_data, "significant_taxa_timeseries.csv"), row.names = 1)
output_data <- "../results/"
ps_deseq <- readRDS(paste0(output_data, "Filtered/ps_deseq_friedfilt.rds"))
ps_css <- readRDS(paste0(output_data, "Filtered/ps_css_friedfilt.rds"))
sig_res <- read.table(paste0(output_data, "significant_taxa_timeseries.tsv"), row.names = 1, sep = "\t")
colnames(sig_res)
sig_res <- read.table(paste0(output_data, "significant_taxa_timeseries.tsv"), row.names = 1, sep = "\t", header = T)
colnames(sig_res)
map_keep <- keepImportantColumns(ps_deseq@sam_data, metabol = F)
rownames(map_keep) <- map_keep$biospecimen_id
map_num <- makeFieldsNumeric(map_keep)
map_num <- map_num %>% select(-c(MARA, date))
nums <- as.vector(unlist(lapply(map_num, is.numeric)) )
map_num[, !nums] <- lapply(map_num[, !nums], factor)
map_num$stool_freq <- as.numeric(map_num$stool_freq)
sample_data(ps_deseq) <- map_num
#Random Forest main function
rand_forest <- function(pred_sequences, ps, include_taxa = T, include_meta = F){
set.seed(1)
phen <- sample_data(ps)$phenotype
fam_id <- sample_data(ps)$familyID
data <- NULL
if(include_taxa){
ps <- prune_taxa(pred_sequences, ps )
data <- t(otu_table(ps))
colnames(data) <- tax_table(ps)[,7]
}
if(include_meta){
metadata <- data.frame(ps@sam_data)
metadata <- metadata %>% select(-c(familyID, biospecimen_id, biospecimen_name, host_name, timepoint, age, dietary_restriction, dietary_supplement, sex, probiotic, vitamin_B, vitamin_D, multivitamin, racial_group))
metadata <- rfImpute(phenotype ~., metadata)
metadata <- metadata %>% select(-c(phenotype))
if(is.null(data)){
data <- metadata
}else{
data <- data.frame(cbind(data, metadata))
}
}
data <- data.frame(phen, data, fam_id)
folds_by_family <- groupKFold(fam_id, 5)
data <- data %>% select(-c(fam_id))
validate <- data[-folds_by_family[[1]],]
training <- data[folds_by_family[[1]],]
control <- trainControl(method='repeatedcv',
number=3,
repeats=3)
tree_depths <- round(seq(2, ncol(data), by = ncol(data) / 6))
tunegrid <- expand.grid(.mtry= tree_depths) #mtry is the depth of each decision tree
rf <- train(phen ~.,
data = training,
method='rf',
metric='Accuracy',
tuneGrid=tunegrid,
trControl=control)
mtry_best = as.numeric(rf$bestTune)
print(paste0("Tree depth: ", mtry_best))
pred_votes <- c()
outputlist <- list()
for(i in 1:5){
AR.classify <- randomForest(phen~., data = training, ntree = 128, mtry = mtry_best, importance = TRUE)
rf <- AR.classify
OOB.votes <- predict(rf, validate[,-1], type="prob");
OOBpred_votes <- OOB.votes
pred_votes <-  OOBpred_votes[,2]
pred.obj <- prediction(pred_votes, data[names(pred_votes), ]$phen)
#roc (tpr / fpr) perforamnce
roc_perf <- performance(pred.obj,"tpr", "fpr") #Calculate the AUC value
auc_roc <- performance(pred.obj, "auc")@y.values[[1]]
perf_obj <-list()
perf_obj[[1]] <- auc_roc
perf_obj[[2]] <- roc_perf
perf_obj[[3]] <- rf
outputlist[[i]] <- perf_obj
}
return(outputlist)
}
perf_obj_meta <- rand_forest(pred_sequences = NA, ps = ps_deseq, include_taxa = F, include_meta = T)
perf_obj_meta <- rand_forest(pred_sequences = NA, ps = ps_deseq, include_taxa = F, include_meta = T)
plotAUCs(perf_obj_meta, 1, "Just Metadata")
plotAUCs <- function(perf_obj, col_ind = 1, plot_name = ""){
avg_auc <- mean(unlist(lapply(perf_obj, function(x) return(x[[1]]))))
plot(perf_obj[[1]][[2]], col = rainbow(8)[col_ind])
for(i in 2:length(perf_obj)){
plot(perf_obj[[i]][[2]], col = rainbow(8)[col_ind], add = T)
}
abline(a=0, b= 1)
text(.9, .1, paste0("AUC: ", round(avg_auc, 3)))
title(plot_name)
print(avg_auc)
}
plotAUCs(perf_obj_meta, 1, "Just Metadata")
varImpPlot(perf_obj_meta[[1]][[3]])
sig_res
View(sig_res)
sig_res$method
perf_obj_0 <- rand_forest(pred_sequences = rownames(sig_res), ps = ps_deseq, include_taxa = T, include_meta = T)
plotAUCs(perf_obj_0, 2, 'All taxa and metadata')
grepl(",", sig_res$method)
use <- grepl(",", sig_res$method)
perf_obj_1 <- rand_forest(pred_sequences = rownames(sig_res)[use], ps = ps_deseq, include_taxa = T, include_meta = T)
plotAUCs(perf_obj_1, 3, "Taxa > 1 and metadata")
use <- grepl(",", sig_res$method)
perf_obj_1 <- rand_forest(pred_sequences = rownames(sig_res)[use], ps = ps_deseq, include_taxa = T, include_meta = T)
plotAUCs(perf_obj_1, 3, "Taxa > 1 and metadata")
sig_res_all <- read.table(paste0(output_data, "significant_taxa_all.tsv"), row.names = 1, sep = "\t", header = T)
rownames(sig_res_all)
perf_obj_2 <- rand_forest(pred_sequences = rownames(sig_res_all), ps = ps_deseq, include_taxa = T, include_meta = T)
plotAUCs(perf_obj_2, 4, "Taxa > 2 and metadata")
use <- grep(",", sig_res$enrichment)
use
sig_res_all$enrichment
?Grep
use <- str_count(sig_res$enrichment, "Aut")
library(stringr)
use <- str_count(sig_res$enrichment, "Aut")
use
use <- str_count(sig_res_all$enrichment, "Aut")
use
use <- str_count(sig_res_all$enrichment, "Aut") >= 2
perf_obj_2 <- rand_forest(pred_sequences = rownames(sig_res_all), ps = ps_deseq, include_taxa = T, include_meta = T)
plotAUCs(perf_obj_2, 4, "Taxa 2 or more timepoints and metadata")
use <- str_count(sig_res_all$enrichment, "Aut") >= 3
perf_obj_2 <- rand_forest(pred_sequences = rownames(sig_res_all), ps = ps_deseq, include_taxa = T, include_meta = T)
plotAUCs(perf_obj_2, 4, "Taxa 2 or more timepoints and metadata")
use <- str_count(sig_res_all$enrichment, "Aut") >= 3
perf_obj_2 <- rand_forest(pred_sequences = rownames(sig_res_all), ps = ps_deseq, include_taxa = T, include_meta = T)
plotAUCs(perf_obj_2, 4, "Taxa 3 or more timepoints and metadata")
use <- str_count(sig_res_all$enrichment, "Aut") >= 4
perf_obj_2 <- rand_forest(pred_sequences = rownames(sig_res_all), ps = ps_deseq, include_taxa = T, include_meta = T)
plotAUCs(perf_obj_2, 4, "Taxa 4 or more timepoints and metadata")
perf_obj_allsig <- rand_forest(pred_sequences = rownames(sig_res), ps = ps_deseq, include_taxa = T, include_meta = F)
perf_obj_allsig <- rand_forest(pred_sequences = rownames(sig_res), ps = ps_deseq, include_taxa = T, include_meta = F)
plotAUCs(perf_obj_allsig, 1, "All Sig Taxa timeseries without metadata")
perf_obj_allsig <- rand_forest(pred_sequences = rownames(sig_res), ps = ps_deseq, include_taxa = T, include_meta = F)
plotAUCs(perf_obj_allsig, 1, "All Sig Taxa timeseries without metadata")
dev.off()
dev.off()
